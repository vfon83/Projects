// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  role          String    @default("engineer")
  projects      Project[] @relation("TeamMembers")
  ledProjects   Project[] @relation("TeamLead")
  uploadedDocs  Document[]
  notes         Note[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
}

model Project {
  id          String     @id @default(uuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  status      String
  teamLeadId  String
  teamLead    User       @relation("TeamLead", fields: [teamLeadId], references: [id])
  teamMembers User[]     @relation("TeamMembers")
  documents   Document[]
  notes       Note[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Document {
  id              String   @id @default(uuid())
  name            String
  filePath        String
  fileType        String
  dataUri         String   @db.Text
  classification  String
  extractedInfo   Json
  annotations     Json
  uploadDate      DateTime
  size            Int
  version         Int      @default(1)
  projectId       String
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedById    String
  uploadedBy      User     @relation(fields: [uploadedById], references: [id])
  status          String   @default("pending")
  reviewers       String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Note {
  id        String   @id @default(uuid())
  content   String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 